package template

import "testing"

func TestTemplate(t *testing.T) {
	t.Run("Arguments template", func(t *testing.T) {
		if `c.Get("%s").(%s),` != GetArgumentTemplate() {
			t.Error("Wrong template for function arguments")
		}
	})

	t.Run("Register service via constructor template", func(t *testing.T) {
		if getConstructorTemplate() != GetRegisterServiceViaConstructorTemplate() {
			t.Error("Wrong template for service constructor registration way")
		}
	})

	t.Run("Register service via factory template", func(t *testing.T) {
		if getFactoryTemplate() != GetRegisterServiceViaFactoryTemplate() {
			t.Error("Wrong template for service factory registration way")
		}
	})

	t.Run("Output template", func(t *testing.T) {
		if getOutputFileTemplate() != GetOutputTemplate() {
			t.Error("Wrong output file template")
		}
	})
}

func getConstructorTemplate() string {
	return `
	compiledContainer.Register("%s", func(c *container.Container) interface{} {
		return %s(%s)
	})
	`
}

func getFactoryTemplate() string {
	return `
	compiledContainer.Register("%s", func(c *container.Container) interface{} {
		return c.Get("%s").(%s).%s(%s)
	})
	`
}

func getOutputFileTemplate() string {
	return `package %s

import (
	%s
)

// =====================================================================================================
//
// BuildContainer is the autogenerated function, you must not change it. If you need another realisation
// of this function you have to:
// 1. change the container configuration if it neccessary
// 2. run rebuild cmd to rebuild this function
//
// Date of generation: %s
//
// =====================================================================================================
func BuildContainer(fatalHanlder func(format string, v ...interface{})) *container.Container {
	compiledContainer := container.NewContainer(fatalHanlder)
	%s
	return compiledContainer
}
	`
}
